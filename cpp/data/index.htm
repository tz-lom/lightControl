<!DOCTYPE html>
<link rel="shortcut icon" href="data:image/x-icon;," type="image/x-icon">
<label>SSID:<input id="ssid"></label><br>
<label>PWD:<input id="password" type="password"></label><br>


<svg width="200" height=200 class="pointInfo"></svg>
<input type="time" id="addTime" value="12:00"><button onClick="addPointWrap()">Add point</button>
<button onClick="removePointWrap()">Remove point</button>
<svg width="500" height="500" class="timePlot"></svg>
<script src="/d3.v4.min.js"></script>
<style>
    .active circle { fill: red }
</style>
<script>

var maxChannel = 5;
var maxPower = 4095;
var configCache;


function loadSettings(){
    d3.json('/settings', function(json){
        document.getElementById('ssid').value = json.ssid;
        document.getElementById('password').value = json.password;
        maxChannel = json.maxChannel

        var p = json.levels.map(function(x, i){
            x.id = i+1;
            x.channels = x.c.map(function(c){
                return {
                    value: Math.round(c*100/x.power*100/maxPower)
                }
            })
            return x;
        })
        p.unshift({id: 0, time:0, power: p[p.length-1].power, channels: p[p.length-1].channels})

        points = p;
        currentPoint = points.length - 1;

        configCache = buildSave()

        rebuildPlot()
        updatePointInfo()

        saveSettings()
    })
}

function buildSave(){
    var levels = points.map(function(x){
        return {
            time: Math.min(23*60+59, Math.max(0, Math.round(x.time))),
            power: Math.min(100, Math.max(0, Math.round(x.power))),
            c: x.channels.map(function(c){
                return Math.min(maxPower, Math.max(0, Math.round(c.value*maxPower/100*x.power/100)));
            })
        }
    })

    levels.shift()
    

    var obj = {
        ssid: document.getElementById('ssid').value,
        password: document.getElementById('password').value,
        levels: levels
    }

    return obj;
}

function saveSettings(){
    var n = buildSave();

    if( n != configCache) {
        var m = JSON.parse(JSON.stringify(n));
    
        var now = new Date();
        m.time = [now.getHours(), now.getMinutes(), now.getSeconds()];
        
        d3.request("/settings/save")
            .header("X-Requested-With", "XMLHttpRequest")
            .header("Content-Type", "application/json")
            .on("load", function(xhr) {
                configCache = n
                setTimeout(saveSettings, 1000)
            })
            .on("error", function(){
                setTimeout(saveSettings, 1000)
            })
            .post(JSON.stringify(m))

    } else {
        setTimeout(saveSettings, 1000)
    }
}


var svg = d3.select("svg.timePlot"),
    margin = {top: 20, right: 100, bottom: 30, left: 50},
    width = +svg.attr("width") - margin.left - margin.right,
    height = +svg.attr("height") - margin.top - margin.bottom;


var points = [
    {
        id: 0,
        time:0,
        power: 10,
        channels: [{value:10}, {value:3}, {value:100}, {value:40}, {value:60}]
    },
    {
        id: 1,
        time: 60*23+59,
        power: 10,
        channels: [{value:0}, {value:30}, {value:100}, {value:40}, {value:60}]
    }
];


var x = d3.scaleTime()
    .domain([new Date(2000, 0, 1,  0), new Date(2000, 0, 2,  0, 0)])
    .rangeRound([0, width])
    //.ticks(24,'s')
    //.tickFormat(d3.timeFormat("%I:%M"))


var y = d3.scaleLinear()
    .domain([0, 100])
    .rangeRound([height, 0]);

var xAxis = d3.axisBottom(x).tickFormat(d3.timeFormat("%H")),
    yAxis = d3.axisLeft(y);

var line = d3.line()
    .x(function(d) { return x(new Date(2000, 0, 1, Math.floor(d.time/60), d.time%60)); })
    .y(function(d) { return y(d.power); });

let drag = d3.drag()
    .on('start', dragstarted)
    .on('drag', dragged)
    .on('end', dragended);
/*
svg.append('rect')
    .attr('class', 'zoom')
    .attr('cursor', 'move')
    .attr('fill', 'none')
    .attr('pointer-events', 'all')
    .attr('width', width)
    .attr('height', height)
    .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')
*/

var focus = svg.append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");


focus.append("path")
    .datum(points)
    .attr("fill", "none")
    .attr("stroke", "steelblue")
    .attr("stroke-linejoin", "round")
    .attr("stroke-linecap", "round")
    .attr("stroke-width", 1.5)
    .attr("d", line)

function rebuildPlot() {

    focus.selectAll('g.point').remove()


    focus.select('path').datum(points).attr('d', line);

    var circleGroup = focus.selectAll('g.point')
        .data(points)
        .enter()
        .filter(function (n, i) {
            return i !== 0;
        })
        .append('g')
        .classed('point', true)
        .attr("transform", function (d) {
            return 'translate(' + x(new Date(2000, 0, 1, Math.floor(d.time / 60), d.time % 60)) + ',' + y(d.power) + ')';
        })
        .call(drag)

    circleGroup
        .append('circle')
        .attr('r', 5.0)
        .style('cursor', 'move')
        .style('fill', 'steelblue')

    circleGroup
        .append('text')
        .attr("x", "10")
        .attr("dy", ".35em")
        .attr("text-anchor", "start")
        .style("fill", "red")
        .text(function (d) {
            return d3.timeFormat('%H:%M')(new Date(2000, 0, 1, Math.floor(d.time / 60), d.time % 60)) + ' ' + d.power.toFixed(0) + '%'
        });
}

rebuildPlot()


focus.append('g')
    .attr('class', 'axis axis--x')
    .attr('transform', 'translate(0,' + height + ')')
    .call(xAxis);

focus.append('g')
    .attr('class', 'axis axis--y')
    .call(yAxis);

function dragstarted(d) {
    d3.select(this).raise().classed('active', true);
    currentPoint = d.id;
    updatePointInfo()
}

function dragged(d) {
    var newTime = x.invert(d3.event.x);
    var newPower = y.invert(d3.event.y);

    newTime = Math.ceil((newTime - new Date(2000, 0 ,1))/60000)

    if(newTime<0) newTime = 0;
    if(newTime>=24*60) newTime=24*60-1;


    if(newPower<0) newPower = 0;
    if(newPower>100) newPower = 100;

    if(d.id !== points.length-1) {

        if(d.id>0) {
            if (newTime <= points[d.id-1].time) newTime = points[d.id-1].time + 1
        }
        if(d.id<points.length-1) {
            if (newTime>= points[d.id+1].time) newTime = points[d.id+1].time-1
        }

        d.time = newTime;
        d.power = newPower;



    } else {
        d.power = newPower;
        points[0].power = newPower;
    }

    d3.select(this)
        .attr('transform', 'translate('+x(new Date(2000, 0, 1, Math.floor(d.time/60), d.time%60))+','+y(d.power)+')')
//        .attr('cx', x(new Date(2000, 0, 1, Math.floor(d.time/60), d.time%60)))
//        .attr('cy', y(d.power))
    d3.select(this).select('text').text(function(d){ return d3.timeFormat('%H:%M')(new Date(2000, 0, 1, Math.floor(d.time/60), d.time%60))+ ' ' + d.power.toFixed(0)+'%' })
    focus.select('path').attr('d', line);
}

function dragended(d) {
    d3.select(this).classed('active', false);
}


function addPoint(time){
    if(time<=0 || time >= 60*23+59) return;

    for(var i=0; i<points.length; ++i) {
        if(points[i].time === time) {
            time++;
            continue;
        }
        if(points[i].time > time){
            points.splice(i, 0, { time: time, power: 50, channels: Array(maxChannel).fill(1).map(function(){ return { value:50 }}) } )
            break;
        }

    }
    points.forEach(function(n, i) { n.id = i })

    rebuildPlot()
    updatePointInfo()
}

function removePoint( id ){
    if(id<=0 || id>=points.length-1) return;

    points.splice(id, 1)
    points.forEach(function(n, i) { n.id = i })

    rebuildPlot()
    updatePointInfo()
}


function addPointWrap(){
    addPoint(document.getElementById('addTime').valueAsNumber/60000)
}

function removePointWrap(){
    removePoint(currentPoint)
}

var currentPoint = points.length-1;

var updatePointInfo;

function buildPointInfoPlot() {
    var svg = d3.select("svg.pointInfo")

    var margin = {top: 20, right: 20, bottom: 20, left: 50},
        width = +svg.attr("width") - margin.left - margin.right,
        height = +svg.attr("height") - margin.top - margin.bottom;


    var focus = svg.append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    var powerScale = d3.scaleLinear()
        .domain([0, 100])
        .rangeRound([height, 0]);

    var powerAxis = d3.axisLeft(powerScale);

    focus.append("g").call(powerAxis)

    var loScale = d3.scaleLinear()
        .domain([0, maxChannel])
        .rangeRound([0, width])

    updatePointInfo = function(){

        //focus.selectAll("line").remove();
        //focus.selectAll("circle").remove();

        var l = focus.selectAll("line.vert")
            .data(points[currentPoint].channels)

        l
            .enter()
                .append("line")
                .classed("vert", true)
                .attr("stroke-dasharray", "5,5")
                .attr("stroke", "#0074D9")
                .attr("x1", function(d,i){ return loScale(i+1) })
                .attr("y1", powerScale(0))
                .attr("x2", function(d,i){ return loScale(i+1) })
            .merge(l)
                .attr("y2", function(d){ return powerScale(d.value) })

        var c = focus.selectAll("circle.vert")
            .data(points[currentPoint].channels)

        c
            .enter()
                .append("circle")
                .classed("vert", true)
                .attr("cx", function(d,i){ return loScale(i+1) })
                .attr("r", 5)
                .style('fill', 'steelblue')
                .call(d3.drag()
                    .on('drag', function(d){
                        var newPower = powerScale.invert(d3.event.y);
                        if(newPower<0) newPower = 0;
                        if(newPower>100) newPower = 100;

                        d.value = newPower

                        updatePointInfo();
                    })
                )
            .merge(c)
                .attr("cy", function(d){ return powerScale(d.value) })


        //.attr("cy", function(d){ return powerScale(d.value) })
    }

    updatePointInfo()
}


buildPointInfoPlot();


loadSettings()

</script>
